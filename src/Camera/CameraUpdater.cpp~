#include "CameraUpdater.h"

#include "ceres/ceres.h"
#include "gflags/gflags.h"
#include "glog/logging.h"

#include "opencv2/highgui/highgui.hpp"
#include "opencv/cv.hpp"
#include "opencv/highgui.h"

CameraUpdater::CameraUpdater(Camera * camera_, std::vector<PoseTransform *> transforms_){
	camera = camera_;
	transforms = transforms_;
};

CameraUpdater::~CameraUpdater(){};
using namespace Eigen;

using ceres::AutoDiffCostFunction;
using ceres::CostFunction;
using ceres::Problem;
using ceres::Solver;
using ceres::Solve;
/*
struct MyReprojectionError {
	double obs_x;
	double obs_y;	

	MyReprojectionError(double x_, double y_) {
		obs_x = x_;
		obs_y = y_;
	}

	template <typename T> bool operator()(const T* const camera, const T* const point, T* residuals) const {
		T p[3];
		ceres::AngleAxisRotatePoint(camera, point, p);

		p[0] += camera[3];
		p[1] += camera[4];
		p[2] += camera[5];

		T xp = - p[0] / p[2];
		T yp = - p[1] / p[2];

		const T& l1 = camera[7];
		const T& l2 = camera[8];
		T r2 = xp*xp + yp*yp;
		T distortion = T(1.0) + r2  * (l1 + l2  * r2);

		const T& focal = camera[6];
		T predicted_x = focal * distortion * xp;
		T predicted_y = focal * distortion * yp;

		residuals[0] = predicted_x - T(obs_x);
		residuals[1] = predicted_y - T(obs_y);
		return true;
	}

   // Factory to hide the construction of the CostFunction object from
   // the client code.
	static ceres::CostFunction* Create(const double x_, const double y_) {
		return (new ceres::AutoDiffCostFunction<MyReprojectionError, 2, 9, 3>(new MyReprojectionError(x_, y_)));
	}
};
*/
void CameraUpdater::initializerUpdate(){
	//printf("initializerUpdate()\n");
	//exit(0);

	float start_fx = camera->fx;
	float start_fy = camera->fy;
	float start_cx = camera->cx;
	float start_cy = camera->cy;
	

	double best_fx = camera->fx;
	double best_fy = camera->fy;
	double best_cx = camera->cx;
	double best_cy = camera->cy;


	double nr_steps = 100;
	double step_shrink = 0.1;
	
	for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
		transforms.at(t)->findPossibleKeypointMatches();
	}

	

/*	
	//Ceres stuff
	printf("ceres optimizer stuff\n");
	ceres::Problem problem;
	
	Solver::Options options;
	options.minimizer_progress_to_stdout = true;
	Solver::Summary summary;
	Solve(options, &problem, &summary);
	std::cout << summary.BriefReport() << "\n";
	exit(0);
*/
	for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
		printf("transforms:%i\n",t);
		transforms.at(t)->findPossibleKeypointMatches();
		transforms.at(t)->ransacFindKeypointMatches();
		transforms.at(t)->ICPupdateMatches();
	}
	
	for(unsigned int iter = 0; iter < 0; iter++){
		printf("iter: %i best f: %10.10f %10.10f best c:  %10.10f %10.10f\n",iter,best_fx,best_fy,best_cx,best_cy);
		camera->fx = best_fx;
		camera->fy = best_fy;
		camera->cx = best_cx;
		camera->cy = best_cy;
		for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
			//transforms.at(t)->ransacFindKeypointMatches();
			transforms.at(t)->ICPupdateMatches();
		}
		
		
		double best_score = 10000000;
		double step = 1;//1;
		for(int refinement = 0; refinement < 3; refinement++){
			//Find best fx
			for(double sfx = best_fx-nr_steps*step; sfx <= best_fx+nr_steps*step; sfx += step){
				camera->fx = sfx;
				camera->fy = best_fy;
				double sumscore = 0;
				double sumval = 0;
				for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
					sumscore += transforms.at(t)->calculateScoreAndTransformFromMatches();
					sumval += transforms.at(t)->selected_origin.size();
				}
				double score = sqrt(sumscore/sumval);
				if(score < best_score){
					best_score = score;
					best_fx = camera->fx;
				}
			}
			camera->fx = best_fx;
			
			//Find best fy
			for(float sfy = best_fy-nr_steps*step; sfy <= best_fy+nr_steps*step; sfy += step){
				camera->fx = best_fx;
				camera->fy = sfy;
				double sumscore = 0;
				double sumval = 0;
				for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
					sumscore += transforms.at(t)->calculateScoreAndTransformFromMatches();
					sumval += transforms.at(t)->selected_origin.size();
				}
				double score = sqrt(sumscore/sumval);
				if(score < best_score){
					best_score = score;
					best_fy = camera->fy;
				}
			}
			camera->fy = best_fy;

			//Find best cx
			for(double scx = best_cx-nr_steps*step; scx <= best_cx+nr_steps*step; scx += step){
				camera->cx = scx;
				camera->cy = best_cy;
				double sumscore = 0;
				double sumval = 0;
				for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
					sumscore += transforms.at(t)->calculateScoreAndTransformFromMatches();
					sumval += transforms.at(t)->selected_origin.size();
				}
				double score = sqrt(sumscore/sumval);
				if(score < best_score){
					best_score = score;
					best_cx = camera->cx;
				}
			}
			camera->cx = best_cx;

			//Find best cy
			for(float scy = best_cy-nr_steps*step; scy <= best_cy+nr_steps*step; scy += step){
				camera->cx = best_cx;
				camera->cy = scy;
				double sumscore = 0;
				double sumval = 0;
				for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
					sumscore += transforms.at(t)->calculateScoreAndTransformFromMatches();
					sumval += transforms.at(t)->selected_origin.size();
				}
				double score = sqrt(sumscore/sumval);
				if(score < best_score){
					best_score = score;
					best_cy = camera->cy;
				}
			}
			camera->cy = best_cy;
			
			step *= step_shrink;
		}
		
	}


	//Calculate and set transforms	
	camera->fx = best_fx;
	camera->fy = best_fy;
	camera->cx = best_cx;
	camera->cy = best_cy;
	for(unsigned int t = 0; t < transforms.size(); t++){//For all posetransforms find possible keypoint matches
		transforms.at(t)->calculateScoreAndTransformFromMatches(true);
	}
}

void CameraUpdater::update(){
	printf("update\n");
	int width = camera->width;
	int height = camera->height;

	std::vector<Match *> ** matchgrid = new std::vector<Match*>*[width];
	for(int w = 0; w < width; w++){
		matchgrid[w] = new std::vector<Match*>[width];
		for(int h = 0; h < height; h++){
			matchgrid[w][h].clear();
		}
	}

	float total_matches = 0;
	for(unsigned int t = 0; t < transforms.size(); t++){
		for(unsigned int i = 1; i < transforms.at(t)->connections.size(); i++){
			printf("nr_matches = %i\n",int(transforms.at(t)->connections.at(i)->matches.size()));
			//std::vector<Match *> matches = transforms.at(t)->connections.at(i)->matches;
			for(unsigned int j = 0; j < transforms.at(t)->connections.at(i)->matches.size(); j++){
				Match * match = transforms.at(t)->connections.at(i)->matches.at(j);
				match->poseTransform = transforms.at(t);
				int src_i = match->src_ind;
				int dst_i = match->dst_ind;
				
				int src_w = src_i % width;
				int src_h = src_i / width;
		
				int dst_w = dst_i % width;
				int dst_h = dst_i / width;
				total_matches++;
				matchgrid[src_w][src_h].push_back(match);
				matchgrid[dst_w][dst_h].push_back(match);
			}
		}
	}
	
	int most_matches = 0;
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			most_matches = std::max(most_matches, int(matchgrid[w][h].size()));
		}
	}
	IplImage * counter = cvCreateImage(cvSize(width,height), IPL_DEPTH_8U, 3);
	cvRectangle(counter,cvPoint(0,0),cvPoint(width,height),cvScalar(0,0,0,0),-1 , 8, 0);
	for(int w = 0; w < width; w+=1){
		for(int h = 0; h < height; h+=1){
			float br = 2*255*float(matchgrid[w][h].size())/float(most_matches);
			cvRectangle(counter,cvPoint(w,h),cvPoint(w,h),cvScalar(br,br,br,0),-1 , 8, 0);
		}
	}
	cvShowImage("counter",counter);
	cvWaitKey(100);
	cvReleaseImage(&counter);

	std::vector<float *> pixel_containers;
	for(int i = 0; i < most_matches; i++){pixel_containers.push_back(new float[8]);}

	float * tmp = new float[8];
	
	float * this_cloud;
	float * other_cloud;
	int other_ind;
	Matrix4f p;
	
	double fx		= camera->fx;
	double fy		= camera->fy;
	double cx		= camera->cx;
	double cy		= camera->cy;
	float invfx		= 1.0f/camera->fx;
    float invfy		= 1.0f/camera->fy;
    
    int min_data = 10;
    
	double error = 0;
	
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			int ind = h*width+w;
				
			std::vector<Match *> & matches = matchgrid[w][h];
			int nr_matches = matches.size();
			if(nr_matches < min_data){continue;}
				
			float d_mul = camera->pixelsFunctions[ind]->d_mul;
	
			//For all matches
			for(int m = 0; m < nr_matches; m++){
				//Look at improvement for this match
				Match * match = matches.at(m);
						
				if(match->src_ind == ind){	//From src->dst
					p = match->poseTransform->transform.inverse();
					other_ind = match->dst_ind;
					this_cloud = match->src->fused_data;
					other_cloud = match->dst->fused_data;
					//printf("src to dst\n");
				}else{						//From dst->src
					p = match->poseTransform->transform;
					other_ind = match->src_ind;
					this_cloud = match->dst->fused_data;
					other_cloud = match->src->fused_data;
				}
				//printf("%f %f %f %f %f %f %f %f\n",this_cloud[8*ind+0],this_cloud[8*ind+1],this_cloud[8*ind+2],this_cloud[8*ind+3],this_cloud[8*ind+4],this_cloud[8*ind+5],this_cloud[8*ind+6],this_cloud[8*ind+7]);	
				float d			= this_cloud[8*ind+3];
				//printf("d: %f\n",d);
				float best_d	= d*d_mul;
				float z			= other_cloud[8*other_ind+3]*camera->pixelsFunctions[other_ind]->d_mul;
					
				int ow = other_ind % width;
				int oh = other_ind / width;
					
				float x = (ow - cx) * z * invfx;
			   	float y = (oh - cy) * z * invfy;
			   		
			   	float other_d = x*p(2,0)+y*p(2,1)+z*p(2,2)+p(2,3);
				
				error += fabs(best_d-other_d);
			}

		}

	}
	printf("error: %f\n",error);
	float start_error = error;
    
    //do 150 times(hopefully it converges by then...)
	float total_improvement = 0;
	float step = 1.001;
	
	float * w_order = new float[width];
	for(int w = 0; w < width; w++){w_order[w] = w;}
	float * h_order = new float[height];
	for(int h = 0; h < height; h++){h_order[h] = h;}
	
	for(int i = 0; i < 5; i++){
		//Random width order
		for(int w = 0; w < width; w++){
			int tmp = w_order[w];
			int rw = rand()%width;
			w_order[w] = w_order[rw];
			w_order[rw] = tmp;
		}
		
		//Random height order
		for(int h = 0; h < height; h++){
			int tmp = h_order[h];
			int rh = rand()%height;
			h_order[h] = h_order[rh];
			h_order[rh] = tmp;
		}
	
		step = 1 + (step-1)*0.95;
		//printf("step: %f\n",step);
		
		//Add noise to avoid local minimas
		for(int w = 0; w < width; w++){
			for(int h = 0; h < height; h++){
				if(int(matchgrid[w][h].size()) < min_data){continue;}
				int ind = h*width+w;
				camera->pixelsFunctions[ind]->d_mul *= 1+5*(step-1)*(2*((float(rand()%100000)/float(100000))-0.5));
			}
		}
		
		double error = 0;
		//For all pixels
		for(int ww = 0; ww < width; ww++){
			for(int hh = 0; hh < height; hh++){
				int w = w_order[ww];
				int h = h_order[hh];
				int ind = h*width+w;
				
				std::vector<Match *> & matches = matchgrid[w][h];
				int nr_matches = matches.size();
				if(nr_matches < min_data){continue;}
				
				float d_mul = camera->pixelsFunctions[ind]->d_mul;
				float inc = step;//Grow
				float best_d_mul = d_mul;
				bool improveing = false;
				//for(int atempt = 0; atempt < 20; atempt++){
				while(true){
					d_mul *= inc;
					float improvement = 0;
					
					//For all matches
					for(int m = 0; m < nr_matches; m++){
						//Look at improvement for this match
						Match * match = matches.at(m);
						
						if(match->src_ind == ind){	//From src->dst
							p = match->poseTransform->transform.inverse();
							other_ind = match->dst_ind;
							this_cloud = match->src->fused_data;
							other_cloud = match->dst->fused_data;
							//printf("src to dst\n");
						}else{						//From dst->src
							p = match->poseTransform->transform;
							other_ind = match->src_ind;
							this_cloud = match->dst->fused_data;
							other_cloud = match->src->fused_data;
						}
						float d = this_cloud[8*ind+3];
						float this_d =	d*d_mul;
						float best_d =	d*best_d_mul;
						float z =	other_cloud[8*other_ind+3]*camera->pixelsFunctions[other_ind]->d_mul;
					
						int ow = other_ind % width;
						int oh = other_ind / width;
					
						float x = (ow - cx) * z * invfx;
				   		float y = (oh - cy) * z * invfy;
				   		
				   		float other_d = x*p(2,0)+y*p(2,1)+z*p(2,2)+p(2,3);
				
						float error_best	= fabs(best_d-other_d);
						float error_now		= fabs(this_d-other_d);

						improvement += error_best-error_now;
					}
					
					if(improvement > 0){
						best_d_mul = d_mul;
						total_improvement += improvement;
						camera->pixelsFunctions[ind]->d_mul = best_d_mul;
						improveing = true;
						//printf("%i %i improvement: %f\n",w,h,improvement);
					}else{
						break;
					}
				}
				if(improveing){continue;}
//				printf("camera->pixelsFunctions[ind]->d_mul: %f\n",camera->pixelsFunctions[ind]->d_mul);
				
				d_mul = camera->pixelsFunctions[ind]->d_mul;
				inc = 1.0/inc;//shrink
				//best_d_mul = d_mul;
				while(true){//for(int atempt = 0; atempt < 200; atempt++){
					d_mul *= inc;
					float improvement = 0;
					
					//For all matches
					for(int m = 0; m < nr_matches; m++){
						//Look at improvement for this match
						Match * match = matches.at(m);

						if(match->src_ind == ind){	//From src->dst
							p = match->poseTransform->transform.inverse();
							other_ind = match->dst_ind;
							this_cloud = match->src->fused_data;
							other_cloud = match->dst->fused_data;
							//printf("src to dst\n");
						}else{						//From dst->src
							p = match->poseTransform->transform;
							other_ind = match->src_ind;
							this_cloud = match->dst->fused_data;
							other_cloud = match->src->fused_data;
						}
						float d = this_cloud[8*ind+3];
						float this_d =	d*d_mul;
						float best_d =	d*best_d_mul;
						float z =	other_cloud[8*other_ind+3]*camera->pixelsFunctions[other_ind]->d_mul;
					
						int ow = other_ind % width;
						int oh = other_ind / width;
					
						float x = (ow - cx) * z * invfx;
				   		float y = (oh - cy) * z * invfy;
				   		
				   		float other_d = x*p(2,0)+y*p(2,1)+z*p(2,2)+p(2,3);
				
						float error_best	= fabs(best_d-other_d);
						float error_now		= fabs(this_d-other_d);
						
						

						improvement += error_best-error_now;
					}
					
					if(improvement > 0){
						best_d_mul = d_mul;
						total_improvement += improvement;
						camera->pixelsFunctions[ind]->d_mul = best_d_mul;
					}else{
						break;
					}
				}
			}
		}
		
		//Normalize
		double sum = 0;
		double sumtot = 0;
		for(int w = 0; w < width; w+=1){
			for(int h = 0; h < height; h+=1){
				if(int(matchgrid[w][h].size()) < min_data){continue;}
				sumtot += 1;
				sum += camera->pixelsFunctions[h*width+w]->d_mul;
			}
		}
		double mean = sum/sumtot;

		for(int w = 0; w < width; w+=1){
			for(int h = 0; h < height; h+=1){
				if(int(matchgrid[w][h].size()) < min_data){continue;}
				camera->pixelsFunctions[h*width+w]->d_mul /= mean;
			}
		}
		
		error = 0;
		for(int w = 0; w < width; w++){
			for(int h = 0; h < height; h++){
				int ind = h*width+w;
				
				std::vector<Match *> & matches = matchgrid[w][h];
				int nr_matches = matches.size();
				if(nr_matches < min_data){continue;}
				
				float d_mul = camera->pixelsFunctions[ind]->d_mul;
	
				//For all matches
				for(int m = 0; m < nr_matches; m++){
					//Look at improvement for this match
					Match * match = matches.at(m);
						
					if(match->src_ind == ind){	//From src->dst
						p = match->poseTransform->transform.inverse();
						other_ind = match->dst_ind;
						this_cloud = match->src->fused_data;
						other_cloud = match->dst->fused_data;
						//printf("src to dst\n");
					}else{						//From dst->src
						p = match->poseTransform->transform;
						other_ind = match->src_ind;
						this_cloud = match->dst->fused_data;
						other_cloud = match->src->fused_data;
					}
					//printf("%f %f %f %f %f %f %f %f\n",this_cloud[8*ind+0],this_cloud[8*ind+1],this_cloud[8*ind+2],this_cloud[8*ind+3],this_cloud[8*ind+4],this_cloud[8*ind+5],this_cloud[8*ind+6],this_cloud[8*ind+7]);	
					float d			= this_cloud[8*ind+3];
					//printf("d: %f\n",d);
					float best_d	= d*d_mul;
					float z			= other_cloud[8*other_ind+3]*camera->pixelsFunctions[other_ind]->d_mul;
					
					int ow = other_ind % width;
					int oh = other_ind / width;
					
					float x = (ow - cx) * z * invfx;
				   	float y = (oh - cy) * z * invfy;
				   		
				   	float other_d = x*p(2,0)+y*p(2,1)+z*p(2,2)+p(2,3);
				
					error += fabs(best_d-other_d);
				}

			}

		}

		printf("step: %f iteration %i error: %f improvement %10.10f(%10.10f)\n",step,i,error,start_error-error,error/start_error);
/*
		IplImage * dimg = cvCreateImage(cvSize(width,height), IPL_DEPTH_8U, 3);
		cvRectangle(dimg,cvPoint(0,0),cvPoint(width,height),cvScalar(0,0,0,0),-1 , 8, 0);
		sum = 0;
		for(int w = 0; w < width; w+=1){
			for(int h = 0; h < height; h+=1){
			
				float d_mul = camera->pixelsFunctions[h*width+w]->d_mul;
				sum += d_mul;
				float br = 125+5000*(d_mul-1);
				cvRectangle(dimg,cvPoint(w,h),cvPoint(w,h),cvScalar(br,br,br,0),-1 , 8, 0);
			}
		}
		printf("mean: %f\n",sum/float(width*height));
		cvShowImage("dimg",dimg);
		cvWaitKey(100);
		cvReleaseImage(&dimg);
*/
		//camera->show();
	}
	
	error = 0;
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			int ind = h*width+w;
				
			std::vector<Match *> & matches = matchgrid[w][h];
			int nr_matches = matches.size();
			if(nr_matches < 4){continue;}
				
			float d_mul = camera->pixelsFunctions[ind]->d_mul;
	
			//For all matches
			for(int m = 0; m < nr_matches; m++){
				//Look at improvement for this match
				Match * match = matches.at(m);
						
				if(match->src_ind == ind){	//From src->dst
					p = match->poseTransform->transform.inverse();
					other_ind = match->dst_ind;
					this_cloud = match->src->fused_data;
					other_cloud = match->dst->fused_data;
					//printf("src to dst\n");
				}else{						//From dst->src
					p = match->poseTransform->transform;
					other_ind = match->src_ind;
					this_cloud = match->dst->fused_data;
					other_cloud = match->src->fused_data;
				}
				//printf("%f %f %f %f %f %f %f %f\n",this_cloud[8*ind+0],this_cloud[8*ind+1],this_cloud[8*ind+2],this_cloud[8*ind+3],this_cloud[8*ind+4],this_cloud[8*ind+5],this_cloud[8*ind+6],this_cloud[8*ind+7]);	
				float d			= this_cloud[8*ind+3];
				//printf("d: %f\n",d);
				float best_d	= d*d_mul;
				float z			= other_cloud[8*other_ind+3]*camera->pixelsFunctions[other_ind]->d_mul;
					
				int ow = other_ind % width;
				int oh = other_ind / width;
					
				float x = (ow - cx) * z * invfx;
			   	float y = (oh - cy) * z * invfy;
			   		
			   	float other_d = x*p(2,0)+y*p(2,1)+z*p(2,2)+p(2,3);
				
				error += fabs(best_d-other_d);
			}

		}

	}
//	printf("error: %f\n",error);

	//exit(0);
/* 
	for(int i = 0; i < 150; i++){
		IplImage * rel = cvCreateImage(cvSize(width,height), IPL_DEPTH_8U, 3);
		cvRectangle(rel,cvPoint(0,0),cvPoint(640,480),cvScalar(255,0,255,0),-1 , 8, 0);
		double error = 0; 
		for(int w = 0; w < width; w++){
			for(int h = 0; h < height; h++){
				int ind = h*width+w;
				std::vector<float *> updateData;
				PixelFunction * pf = camera->pixelsFunctions[ind];
				float sum_mean = 0;
				for(int k = 0; k < matchgrid[w][h].size(); k++){
					Match * match = matchgrid[w][h].at(k);
					float * data = pixel_containers.at(k);
					for(int j = 0; j < 8; j++){data[j] = 1;}
					updateData.push_back(data);

					if(match->src_ind == ind){	//From src->dst
						p = match->poseTransform->transform.inverse();
						other_ind = match->dst_ind;
						this_cloud = match->src->fused_data;
						other_cloud = match->dst->fused_data;
						//printf("src to dst\n");
					}else{						//From dst->src
						p = match->poseTransform->transform;
						other_ind = match->src_ind;
						this_cloud = match->dst->fused_data;
						other_cloud = match->src->fused_data;
					}
					
					for(int j = 0; j < 8; j++){tmp[j] = other_cloud[8*other_ind+j];}
					camera->pixelsFunctions[other_ind]->getValues(tmp);
					
					int ow = other_ind % width;
					int oh = other_ind / width;
					
					float z = tmp[3];
					float x = (ow - cx) * z * invfx;
			   		float y = (oh - cy) * z * invfy;
				
					data[3] = this_cloud[8*ind+3];
					data[7] = x*p(2,0)+y*p(2,1)+z*p(2,2)+p(2,3);
					


					error+= fabs(data[3]-data[7]);
					sum_mean += data[3]/data[7];
				}
				if(matchgrid[w][h].size() > 0){
					sum_mean /= float(matchgrid[w][h].size());
					pf->update(updateData,2,0.005*pow(0.97,i));
					if(sum_mean < 0.8){
						printf("sum_mean %i %i = %f\n",w,h,sum_mean);
						for(int k = 0; k < matchgrid[w][h].size(); k++){
							printf("%i %i %i-> %f %f\n",w,h,k,updateData.at(k)[3],updateData.at(k)[7]);
						}

					}else{
						float br = 256/2+5000.0f*(sum_mean-1);
						cvRectangle(rel,cvPoint(w,h),cvPoint(w,h),cvScalar(br,br,br,0),-1 , 8, 0);
					}
				}
			}
		}
		printf("%i error: %f\n",i,error/total_matches);
		cvShowImage("rel",rel);
		cvWaitKey(100);
		cvReleaseImage(&rel);
	}
*/
//exit(0);
/*
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	std::vector<float*> ** data = new std::vector<float*>*[width];
	for(int w = 0; w < width; w++){
		data[w] = new std::vector<float*>[height];
		for(int h = 0; h < height; h++){
			data[w][h].clear();
		}
	}
	
	
	for(int t = 0; t < transforms.size(); t++){
		PoseTransform * trans = transforms.at(t);
		Matrix4f pose	= trans->transform;
		Matrix4f ipose	= pose.inverse();
		float pmat00 = pose(0,0);
		float pmat01 = pose(0,1);
		float pmat02 = pose(0,2);
		float pmat03 = pose(0,3);
		float pmat10 = pose(1,0);
		float pmat11 = pose(1,1);
		float pmat12 = pose(1,2);
		float pmat13 = pose(1,3);
		float pmat20 = pose(2,0);
		float pmat21 = pose(2,1);
		float pmat22 = pose(2,2);
		float pmat23 = pose(2,3);
		
		float ipmat00 = ipose(0,0);
		float ipmat01 = ipose(0,1);
		float ipmat02 = ipose(0,2);
		float ipmat03 = ipose(0,3);
		float ipmat10 = ipose(1,0);
		float ipmat11 = ipose(1,1);
		float ipmat12 = ipose(1,2);
		float ipmat13 = ipose(1,3);
		float ipmat20 = ipose(2,0);
		float ipmat21 = ipose(2,1);
		float ipmat22 = ipose(2,2);
		float ipmat23 = ipose(2,3);

		std::vector<Match *> all_matches;
		for(int i = 0; i < trans->connections.size(); i++){
			Frame * src = trans->connections.at(i)->src;
			Frame * dst = trans->connections.at(i)->dst;
			
			float * src_current_cloud = src->current_cloud;
			float * dst_current_cloud = dst->current_cloud;
			
			Matrix3f color	= trans->connections.at(i)->colorTransform;
			Matrix3f icolor	= color.inverse();
			
			float cmat00 = color(0,0);
			float cmat01 = color(0,1);
			float cmat02 = color(0,2);
			float cmat10 = color(1,0);
			float cmat11 = color(1,1);
			float cmat12 = color(1,2);
			float cmat20 = color(2,0);
			float cmat21 = color(2,1);
			float cmat22 = color(2,2);

			float icmat00 = icolor(0,0);
			float icmat01 = icolor(0,1);
			float icmat02 = icolor(0,2);
			float icmat10 = icolor(1,0);
			float icmat11 = icolor(1,1);
			float icmat12 = icolor(1,2);
			float icmat20 = icolor(2,0);
			float icmat21 = icolor(2,1);
			float icmat22 = icolor(2,2);
						
			std::vector<Match *> matches = trans->connections.at(i)->matches;
			for(int j = 0; j < matches.size(); j++){
				Match * match = matches.at(j);
				all_matches.push_back(match);
				
				int src_i = match->src_ind;
				int dst_i = match->dst_ind;
				
				int src_w = src_i % width;
				int src_h = src_i / width;
		
				int dst_w = dst_i % width;
				int dst_h = dst_i / width;
				
				//SRC DATA
				int src_i6		= 6*src_i;

				float sr = src_current_cloud[src_i6+0];//
				float sg = src_current_cloud[src_i6+1];//
				float sb = src_current_cloud[src_i6+2];//
				float sx = src_current_cloud[src_i6+3];//
				float sy = src_current_cloud[src_i6+4];//
				float sz = src_current_cloud[src_i6+5];//

				float t_sr = sr*cmat00+sg*cmat01+sb*cmat02;
				float t_sg = sr*cmat10+sg*cmat11+sb*cmat12;
				float t_sb = sr*cmat20+sg*cmat21+sb*cmat22;
//				float t_sx = sx*pmat00+sy*pmat01+sz*pmat02+pmat03;
//				float t_sy = sx*pmat10+sy*pmat11+sz*pmat12+pmat13;
				float t_sz = sx*pmat20+sy*pmat21+sz*pmat22+pmat23;
				
				//DST DATA		
				int dst_i6	= dst_i*6;

				float dr = dst_current_cloud[dst_i6+0];
				float dg = dst_current_cloud[dst_i6+1];
				float db = dst_current_cloud[dst_i6+2];
				float dx = dst_current_cloud[dst_i6+3];
				float dy = dst_current_cloud[dst_i6+4];
				float dz = dst_current_cloud[dst_i6+5];
				
				float t_dr = dr*icmat00+dg*icmat01+db*icmat02;
				float t_dg = dr*icmat10+dg*icmat11+db*icmat12;
				float t_db = dr*icmat20+dg*icmat21+db*icmat22;
//				float t_dx = dx*ipmat00+dy*ipmat01+dz*ipmat02+ipmat03;
//				float t_dy = dx*ipmat10+dy*ipmat11+dz*ipmat12+ipmat13;
				float t_dz = dx*ipmat20+dy*ipmat21+dz*ipmat22+ipmat23;
				
				float * srct_to_dst = new float[8];
				srct_to_dst[0] = sr;
				srct_to_dst[1] = sg;
				srct_to_dst[2] = sb;
				srct_to_dst[3] = sz;
				srct_to_dst[4] = t_dr;
				srct_to_dst[5] = t_dg;
				srct_to_dst[6] = t_db;
				srct_to_dst[7] = t_dz;
				data[src_w][src_h].push_back(srct_to_dst);
				
				float * dstt_to_src = new float[8];
				dstt_to_src[0] = dr;
				dstt_to_src[1] = dg;
				dstt_to_src[2] = db;
				dstt_to_src[3] = dz;
				dstt_to_src[4] = t_sr;
				dstt_to_src[5] = t_sg;
				dstt_to_src[6] = t_sb;
				dstt_to_src[7] = t_sz;
				data[dst_w][dst_h].push_back(dstt_to_src);
			}
		}
	}
*/

/*
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			int nr = data[w][h].size();
			float sum1 = 0;
			float sum2 = 0;
			for(int i = 0; i < nr; i++){
				sum1 += data[w][h].at(i)[3];
				sum2 += data[w][h].at(i)[7];
			}
			float rel = sum1/sum2;
			cvRectangle(img,cvPoint(w,h),cvPoint(w,h),cvScalar(5*nr,5*nr,5*nr,0),-1 , 8, 0);
			float crel = 125+5000*(rel-1);
			cvRectangle(zimg,cvPoint(w,h),cvPoint(w,h),cvScalar(crel,crel,crel,0),-1 , 8, 0);
		}
	}
	
	cvShowImage("nr_matches_img",img);
	cvShowImage("zimg",zimg);
	cvWaitKey(0);
*/
/*
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			if(data[w][h].size() < 5){continue;}
			using namespace std;
			vector<float *> current_data;
			int wo = 0;
			int ho = 0;
			for(int ww = max(w-wo,0); ww <= min(w+wo,width-1); ww++){
				for(int hh = max(h-ho,0); hh <= min(h+ho,height-1); hh++){
					for(int k = 0; k < data[ww][hh].size(); k++){
						current_data.push_back(data[ww][hh].at(k));
					}
				}
			}
			camera->pixelsFunctions[h*width+w]->update(current_data,5.00f,0.0005f,1.0f);
		}
	}
	
	IplImage * dmul = cvCreateImage(cvSize(width,height), IPL_DEPTH_8U, 3);
	IplImage * img = cvCreateImage(cvSize(width,height), IPL_DEPTH_8U, 3);
	IplImage * zimg = cvCreateImage(cvSize(width,height), IPL_DEPTH_8U, 3);
	
	cvRectangle(img,cvPoint(0,0),cvPoint(width,height),cvScalar(0,0,0,0),-1 , 8, 0);
	cvRectangle(zimg,cvPoint(0,0),cvPoint(width,height),cvScalar(0,0,0,0),-1 , 8, 0);
	cvRectangle(dmul,cvPoint(0,0),cvPoint(width,height),cvScalar(0,0,0,0),-1 , 8, 0);
	
	double sum_error = 0;
	
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			int nr = data[w][h].size();
			float sum1 = 0;
			float sum2 = 0;
			for(int i = 0; i < nr; i++){
				sum1 += data[w][h].at(i)[3];
				sum2 += data[w][h].at(i)[7];
			}
			float rel = sum1/sum2;
			
			if(nr > 0){
				sum_error += fabs(rel-1);
			}
			cvRectangle(img,cvPoint(w,h),cvPoint(w,h),cvScalar(5*nr,5*nr,5*nr,0),-1 , 8, 0);
			float crel = 125+5000*(rel-1);
			
			
			cvRectangle(zimg,cvPoint(w,h),cvPoint(w,h),cvScalar(crel,crel,crel,0),-1 , 8, 0);

			float dmu = 125+5000*(camera->pixelsFunctions[h*width+w]->d_mul-1);
			cvRectangle(dmul,cvPoint(w,h),cvPoint(w,h),cvScalar(dmu,dmu,dmu,0),-1 , 8, 0);
		}
	}
	cvShowImage("dmul",dmul);
	cvShowImage("img",img);
	cvShowImage("zimg",zimg);
	printf("error:%f\n",sum_error);
	cvWaitKey(30);
	cvReleaseImage(&dmul);
	cvReleaseImage(&img);
	cvReleaseImage(&zimg);
	
	for(int w = 0; w < width; w++){
		for(int h = 0; h < height; h++){
			int nr = data[w][h].size();
			for(int i = 0; i < nr; i++){
				delete[] data[w][h].at(i);
			}
		}
		delete[] data[w];
	}
	delete[] data;
*/
}
